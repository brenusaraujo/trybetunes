{"ast":null,"code":"var _jsxFileName = \"/Users/brenoaraujo/projects-to-github/TrybeTunes/src/pages/Album.jsx\";\nimport React, { Component } from 'react';\nimport { shape } from 'prop-types';\nimport getMusics from '../services/musicsAPI';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport '../css/Album.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends Component {\n  constructor() {\n    super();\n    this.updateFavoriteSongs = this.updateFavoriteSongs.bind(this);\n    this.state = {\n      albumContent: [],\n      allFavoriteSongs: [],\n      loading: false\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props;\n    const albumContent = await getMusics(id);\n    const allFavoriteSongs = await getFavoriteSongs();\n    this.setState({\n      albumContent,\n      allFavoriteSongs\n    });\n  }\n\n  updateFavoriteSongs(song, action) {\n    const addOrRemove = action === 'add' ? addSong : removeSong;\n    this.setState({\n      loading: true\n    }, () => addOrRemove(song).then(() => {\n      getFavoriteSongs().then(favorites => {\n        this.setState({\n          allFavoriteSongs: favorites || [],\n          loading: false\n        });\n      });\n    }));\n  }\n\n  render() {\n    const {\n      albumContent,\n      loading,\n      allFavoriteSongs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), !loading && albumContent.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"album-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: albumContent[0].artworkUrl100,\n          alt: albumContent[0].collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"album-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            \"data-testid\": \"artist-name\",\n            children: albumContent[0].artistName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"album-name\",\n            children: albumContent[0].collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"album-songs\",\n        children: !loading && albumContent.filter((_song, index) => index > 0).map(song => /*#__PURE__*/_jsxDEV(MusicCard, {\n          song: song,\n          allFavoriteSongs: allFavoriteSongs,\n          updateFavoriteSongs: this.updateFavoriteSongs\n        }, song.trackId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: shape({}).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/Users/brenoaraujo/projects-to-github/TrybeTunes/src/pages/Album.jsx"],"names":["React","Component","shape","getMusics","addSong","removeSong","getFavoriteSongs","Header","MusicCard","Album","constructor","updateFavoriteSongs","bind","state","albumContent","allFavoriteSongs","loading","componentDidMount","match","params","id","props","setState","song","action","addOrRemove","then","favorites","render","length","artworkUrl100","collectionName","artistName","filter","_song","index","map","trackId","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { shape } from 'prop-types';\n\nimport getMusics from '../services/musicsAPI';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\n\nimport '../css/Album.css';\n\nclass Album extends Component {\n  constructor() {\n    super();\n\n    this.updateFavoriteSongs = this.updateFavoriteSongs.bind(this);\n\n    this.state = {\n      albumContent: [],\n      allFavoriteSongs: [],\n      loading: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n\n    const albumContent = await getMusics(id);\n    const allFavoriteSongs = await getFavoriteSongs();\n    this.setState({ albumContent, allFavoriteSongs });\n  }\n\n  updateFavoriteSongs(song, action) {\n    const addOrRemove = (action === 'add') ? addSong : removeSong;\n\n    this.setState(\n      { loading: true },\n      () => addOrRemove(song).then(() => {\n        getFavoriteSongs().then((favorites) => {\n          this.setState({ allFavoriteSongs: favorites || [], loading: false });\n        });\n      }),\n    );\n  }\n\n  render() {\n    const { albumContent, loading, allFavoriteSongs } = this.state;\n\n    return (\n      <div data-testid=\"page-album\" className=\"page\">\n        <Header />\n\n        { !loading && albumContent.length > 0 ? (\n          <div className=\"album-info\">\n            <img\n              src={ albumContent[0].artworkUrl100 }\n              alt={ albumContent[0].collectionName }\n            />\n\n            <div className=\"album-title\">\n              <h1 data-testid=\"artist-name\">\n                { albumContent[0].artistName }\n              </h1>\n\n              <p data-testid=\"album-name\">\n                { albumContent[0].collectionName }\n              </p>\n            </div>\n          </div>\n        ) : <p className=\"loading\">Carregando...</p> }\n\n        <ul className=\"album-songs\">\n          { !loading && albumContent\n            .filter((_song, index) => index > 0)\n            .map((song) => (\n              <MusicCard\n                key={ song.trackId }\n                song={ song }\n                allFavoriteSongs={ allFavoriteSongs }\n                updateFavoriteSongs={ this.updateFavoriteSongs }\n              />\n            ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: shape({}).isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}